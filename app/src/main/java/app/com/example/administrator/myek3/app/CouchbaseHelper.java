package app.com.example.administrator.myek3.app;

import android.util.Log;

import com.couchbase.lite.CouchbaseLiteException;
import com.couchbase.lite.Database;
import com.couchbase.lite.Document;
import com.couchbase.lite.Manager;
import com.couchbase.lite.Query;
import com.couchbase.lite.QueryEnumerator;
import com.couchbase.lite.QueryRow;
import com.couchbase.lite.android.AndroidContext;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import static android.R.attr.key;

public class CouchbaseHelper {

    Manager manager = null;
    Database database = null;
    android.content.Context ctx = null;

    private static final String TAG = MainActivity.class.getSimpleName();

    /**
     * Default constructor. Generates an instance of the database manager within the context of
     * our application. This manager will handle all queries to the database and needs to be setup
     * first.
     * @param ctx
     */
    public CouchbaseHelper(android.content.Context ctx) {
        Log.d(TAG, "Database constructor called.");
        try {
            manager = new Manager(new AndroidContext(ctx), Manager.DEFAULT_OPTIONS);
        } catch (IOException e) {
            e.printStackTrace();
        }
        createCouchbaseDatabase();
    }

    /**
     * Creating a database if it does not exist yet.
     */
    private void createCouchbaseDatabase() {

        String databaseName = "shoppinglist";

        Log.d(TAG, "Create database method called.");
        // Create or open the database named app.
        try {
            database = manager.getDatabase(databaseName);
        } catch (CouchbaseLiteException e) {
            e.printStackTrace();
        }
    }

    /**
     * This is an example of how to insert a single document. Probably we will be inserting
     * complete shopping lists instead of articles so this needs to be adjusted.
     */
    public void createArticle() {
        Log.d(TAG, "Create article method called.");
        // The properties that will be saved on the document
        Map<String, Object> properties = new HashMap<>();
        properties.put("title", "Couchbase Mobile");
        properties.put("sdk", "Java");
        // Create a new document
        Document document = database.createDocument();
        // Save the document to the database.
        try {
            document.putProperties(properties);
        } catch (CouchbaseLiteException e) {
            Log.e(TAG, "Error while putting properties.");
            e.printStackTrace();
        }
        // Log the document ID (generated by the database).
        Log.d(TAG, String.format("Document ID: %s", document.getId()));
    }

    public void addShoppingList(ShoppingList shoppingList) {
        Log.d(TAG, "addShoppingList method called.");
        // The properties that will be saved on the document.
        Map<String, Object> properties = new HashMap<>();
        properties.put(shoppingList.getShoppingListName(), shoppingList);
        // Create a new document.
        Document document = database.createDocument();
        // Save the document to the database.
        try {
            document.putProperties(properties);
        } catch (CouchbaseLiteException e) {
            Log.e(TAG, "Error while putting properties.");
            e.printStackTrace();
        }
        // Log the document ID (generated by the database).
        Log.d(TAG, String.format("Document ID: %s", document.getId()));
    }

    /**
     * Returns a given shopping list by its given id.
     * @param id
     * @return
     */
    public ShoppingList getShoppingListById(String id) {

        String listName = null;
        List<Article> articleList = new ArrayList<Article>();
        ShoppingList shoppingList;

        Log.d(TAG, "Calling getShoppingListById: " + id);
        Document doc = database.getDocument(id);
        Log.d(TAG, "Doc: " + doc);
        Map<String, Object> properties = doc.getProperties();
        Log.d(TAG, "Document properties: " + properties);
        for(Map.Entry<String, Object> entry : properties.entrySet()) {
            Log.d(TAG, "Key => " + entry.getKey());
            Log.d(TAG, "Value => " + entry.getValue());
            if(entry.getKey() != "_id" && entry.getKey() != "_rev") {
                Log.d(TAG, "List name: " + entry.getKey());
                listName = entry.getKey();
            }
        }

        /**
         * Working example for shoppinglists. Fix Object state!
         */
//        Map<ShoppingList, ArrayList<Article>> myShoppingList = (Map<ShoppingList, ArrayList<Article>>) doc.getProperty("BananaList001");
//        Log.d(TAG, "ShoppingList: " + myShoppingList);

        Map<ShoppingList, ArrayList<Article>> myShoppingList = (Map<ShoppingList, ArrayList<Article>>) doc.getProperty("BananaList001");
        Log.d(TAG, "ShoppingList: " + myShoppingList);


//        ArrayList<Article> myArraylist = ArrayList<Article> myShoppingList.get("shoppingListArticles");


        /**
         * ArrayList of Articles.
         */
        Log.d(TAG, "Shopping list Articles class => " + myShoppingList.get("shoppingListArticles").getClass());

        /**
         * TODO: Use for sorting before calling Article constructors!!!!
         */
//        for(int i = 0; i < myShoppingList.get("shoppingListArticles").size(); i++) {
//
//            Object art11 = myShoppingList.get("shoppingListArticles").get(i);
//            Map<String, Object> articleMap1 = (Map<String, Object>) art11;
////            String amount = (String) articleMap1.get("articleAmount");
////            String name = (String) articleMap1.get("articleName");
////            String comment = (String) articleMap1.get("articleComment");
////            Double price = (Double) articleMap1.get("articlePrice");
//            Article artikel = new Article(
//                    (String) articleMap1.get("articleName"),
//                    (String) articleMap1.get("articleAmount"),
//                    null,
//                    (Double) articleMap1.get("articlePrice"),
//                    (String) articleMap1.get("articleComment"));
//            Log.d(TAG, "art11 :::::::::: " + artikel.toString());
//        }




        for(Object art : myShoppingList.get("shoppingListArticles")) {
            Log.d(TAG, "================== Article in myShoppingList ==================");
            Log.d(TAG, "art :: " + art);
            Log.d(TAG, "art 2 string:: " + art.toString());
            Log.d(TAG, "art getClass:: " + art.getClass());

            Article article = new Article();
            Map<String, Object> articleMap = (Map<String, Object>) art;
            for(Map.Entry<String, Object> entry : articleMap.entrySet()) {

                if(entry.getKey().equals("articleName") ) {
                    Log.d(TAG, "articleName: " + entry.getValue());
                    article.setArticleName(entry.getValue().toString());
                }
                if(entry.getKey() == "articleAmount") {
                    Log.d(TAG, "articleAmount: " + entry.getValue());
                    article.setArticleAmount((String) entry.getValue());
                }
                if(entry.getKey() == "articleUnit") {
                    Log.d(TAG, "articleUnit: " + entry.getValue());
                    article.setArticleUnit((String) entry.getValue());
                }
                if(entry.getKey() == "articlePrice") {
                    Log.d(TAG, "articlePrice: " + entry.getValue());
                    article.setArticlePrice((Double) entry.getValue());
                }
                if(entry.getKey() == "articleComment") {
                    Log.d(TAG, "articleComment: " + entry.getValue());
                    article.setArticleComment((String) entry.getValue());
                }
                if(entry.getKey() == "articleChecked") {
                    Log.d(TAG, "articleChecked: " + entry.getValue());
                    article.setArticleChecked((Boolean) entry.getValue());
                }
                Log.d(TAG, "EXCEPTION LOG: " + article.getArticleName());
                if(article.getArticleName() != null && article.getArticleAmount() != null) {
                }
            }
            articleList.add(article);
        }
        shoppingList = new ShoppingList(listName, (ArrayList<Article>) articleList);
        return shoppingList;
    }

    /**
     * This is an example on how to work on all existing documents which might be interesting
     * when working operations on the whole collection.
     */
    public void getAllDocuments() {
        Log.d(TAG, "Calling getAllDocuments.");
        // Let's find all documents and print them to the console.
        Query query = database.createAllDocumentsQuery();
        query.setAllDocsMode(Query.AllDocsMode.ALL_DOCS);
        QueryEnumerator result = null;
        try {
            result = query.run();
        } catch (CouchbaseLiteException e) {
            e.printStackTrace();
        }
        for (Iterator<QueryRow> it = result; it.hasNext(); ) {
            QueryRow row = it.next();
            Log.d(TAG, String.format("%s. document: %s", row.getSequenceNumber(), row.getDocumentId()));

            if(row.getDocumentId() != null) {
                Document doc = database.getDocument(row.getDocumentId());
                // We can directly access properties from the document object.
                Log.d(TAG, "doc.getProperty(\"BananaList001\") " + doc.getProperty("BananaList001"));

                Map<ShoppingList, ArrayList<Article>> testObject = (Map<ShoppingList, ArrayList<Article>>) doc.getProperty("BananaList001");
                Log.d(TAG, "TESTOBJECT: " + testObject.getClass());
                /**
                 * Returns a java.util.ArrayList of articles.
                 */
                Log.d(TAG, "TESTOBJECT get shoppingListArticles: " + testObject.get("shoppingListArticles"));
//                Log.d(TAG, "TESTOBJECT get shoppingListArticles: " + testObject.get("shoppingListArticles").getClass());

//                ArrayList<Article> testArticleList = testObject.get("shoppingListArticles");
//                ShoppingList recreatedShoppingList = new ShoppingList("TESTSHOPPINGLIST", testObject.get("shoppingListArticles"));
//                addShoppingList(recreatedShoppingList);
            }
        }
    }
}
